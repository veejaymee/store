openapi: 3.0.0
info:
  title: Order Management API
  version: 1.0.0
  description: API for managing customers, orders, and products.
servers:
  - url: https://api.example.com/v1
    description: Production server

tags:
  - name: order
    description: Order management operations
  - name: customer
    description: Customer management operations
  - name: product
    description: Product management operations

paths:
  /v1/api/order:
    get:
      tags:
        - order
      summary: Get all Orders
      operationId: getAllOrders
      parameters:
        - name: page
          in: query
          description: The page number
          required: false
          schema:
            type: integer
            example: 0
        - name: size
          in: query
          description: The number of items per page
          required: false
          schema:
            type: integer
            example: 10
        - name: sort
          in: query
          description: |
            The sorting criteria in the format: `property,asc|desc`. 
            If not provided, the default is ascending order.
          required: false
          schema:
            type: string
            example: id,desc
      responses:
        '200':
          description: A paginated list of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllOrders200Response'
    post:
      tags:
        - order
      summary: Create a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
  /v1/api/order/{orderId}:
    get:
      tags:
        - order
      summary: Get an order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of the order to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
        '404':
          description: Order not found
  /v1/api/customer:
    get:
      tags:
        - customer
      summary: Get all customers
      operationId: getAllCustomers
      responses:
        '200':
          description: A list of customers matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerDTO'
    post:
      tags:
        - customer
      summary: Create a new customer
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
  /v1/api/customer/{name}:
    get:
      tags:
        - customer
      summary: Search by customer name
      operationId: searchCustomersByName
      parameters:
        - name: name
          in: path
          description: Name of the Customer to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of customers matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerDTO'
  /v1/api/product:
    get:
      tags:
        - product
      summary: Get all products
      operationId: getProduct
      responses:
        '200':
          description: A list of products or a specific product
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDTO'
    post:
      tags:
        - product
      summary: Create a new product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
  /v1/api/product/{productId}:
    get:
      tags:
        - product
      summary: Get product by specific product by ID
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: long
      responses:
        '200':
          description: A list of products or a specific product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDTO'
        '404':
          description: Order not found

components:
  schemas:
    GetAllOrders200Response:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrderDTO'
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
              example: 0
            pageSize:
              type: integer
              example: 10
        totalPages:
          type: integer
          example: 5
        totalElements:
          type: integer
          example: 50
        size:
          type: integer
          example: 10
        numberOfElements:
          type: integer
          example: 10
        number:
          type: integer
          example: 0
        sort:
          type: object
          properties:
            unsorted:
              type: boolean
              example: true
            sorted:
              type: boolean
              example: false
            empty:
              type: boolean
              example: false
    CustomerDTO:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: "John Doe"
      required:
        - id
        - name

    CreateCustomerRequest:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
      required:
        - name

    OrderDTO:
      type: object
      properties:
        id:
          type: string
          example: "1001"
        description:
          type: string
          example: "Order for electronics"
        customerId:
          type: string
          example: "1"
        products:
          type: array
          items:
            $ref: '#/components/schemas/OrderProductDTO'  # Mapping for products in Order
      required:
        - id
        - description
        - customerId

    CreateOrderRequest:
      type: object
      properties:
        description:
          type: string
          example: "Order for electronics"
        customerId:
          type: string
          example: "1"
        productIds:
          type: array
          items:
            $ref: '#/components/schemas/ProductRequest'  # Mapping product IDs for order creation
      required:
        - description
        - customerId
        - productIds

    ProductRequest:
      type: object
      properties:
        productId:
          type: string
          example: "101"
        quantity:
          type: integer
          example: 2
      required:
        - productId
        - quantity

    OrderProductDTO:
      type: object
      properties:
        productId:
          type: string
          example: "101"
        quantity:
          type: integer
          example: 2
      required:
        - productId
        - quantity

    ProductDTO:
      type: object
      properties:
        id:
          type: string
          example: "101"
        name:
          type: string
          example: "Laptop"
        price:
          type: number
          format: double
          example: 999.99
        orderIds:
          type: array
          items:
            type: string
          description: "List of order IDs containing this product"
      required:
        - id
        - name
        - price

    CreateProductRequest:
      type: object
      properties:
        name:
          type: string
          example: "Laptop"
        price:
          type: number
          format: double
          example: 999.99
      required:
        - name
        - price

  responses:
    HighLatencyWarning:
      description: Warning about high latency between the application server and database
      content:
        application/json:
          schema:
            type: object
            properties:
              warning:
                type: string
                example: "High latency detected between application server and database. Consider optimizing database queries or co-locating the database."

  parameters:
    OrderIdParameter:
      name: orderId
      in: path
      description: ID of the order to retrieve
      required: true
      schema:
        type: string
    ProductIdParameter:
      name: productId
      in: query
      description: ID of the product to retrieve
      required: false
      schema:
        type: string
    CustomerNameParameter:
      name: name
      in: query
      description: Substring to search in customer names
      required: false
      schema:
        type: string
